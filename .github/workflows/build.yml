name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BINARY_NAME: pkagent

jobs:
  build:
    name: Build for ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds only (agent is Linux-specific)
          - goos: linux
            goarch: amd64
            filename: pkagent-linux-x86_64
          - goos: linux
            goarch: arm64
            filename: pkagent-linux-aarch64
          - goos: linux
            goarch: arm
            filename: pkagent-linux-arm
          - goos: linux
            goarch: 386
            filename: pkagent-linux-i386

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Get version from git tag
      id: version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(git describe --tags --always --dirty)
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build \
          -ldflags "-X main.Version=${{ steps.version.outputs.VERSION }} -w -s" \
          -o ${{ matrix.filename }} \
          .

    - name: Test binary
      if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
      run: |
        chmod +x ${{ matrix.filename }}
        ./${{ matrix.filename }} --version

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: ${{ matrix.filename }}

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Run tests
      run: go test -v ./...

    - name: Run go vet
      run: go vet ./...

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: ./dist

    - name: List artifacts
      run: ls -la ./dist/

    - name: Generate checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: PubliKey Agent ${{ github.ref_name }}
        body: |
          ## PubliKey Agent ${{ github.ref_name }}

          ### Installation

          **Linux x86_64:**
          ```bash
          curl -L -o pkagent https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/pkagent-linux-x86_64
          chmod +x pkagent
          sudo ./pkagent install --token=YOUR_TOKEN --endpoint=YOUR_ENDPOINT
          ```

          **Linux ARM64:**
          ```bash
          curl -L -o pkagent https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/pkagent-linux-aarch64
          chmod +x pkagent
          sudo ./pkagent install --token=YOUR_TOKEN --endpoint=YOUR_ENDPOINT
          ```

          ### Supported Architectures
          - Linux x86_64 (Intel/AMD 64-bit)
          - Linux ARM64 (AArch64)
          - Linux ARM (32-bit)
          - Linux i386 (32-bit Intel)

          ### Checksums
          See `checksums.txt` for SHA256 checksums of all binaries.

          ### Changes
          See commit history for detailed changes in this release.
        draft: false
        prerelease: false

    - name: Upload Linux x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/pkagent-linux-x86_64
        asset_name: pkagent-linux-x86_64
        asset_content_type: application/octet-stream

    - name: Upload Linux ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/pkagent-linux-aarch64
        asset_name: pkagent-linux-aarch64
        asset_content_type: application/octet-stream

    - name: Upload Linux ARM
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/pkagent-linux-arm
        asset_name: pkagent-linux-arm
        asset_content_type: application/octet-stream

    - name: Upload Linux i386
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/pkagent-linux-i386
        asset_name: pkagent-linux-i386
        asset_content_type: application/octet-stream


    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain